/* LVB Format */

This format is the binary equivalent of the plain-text LEV format.
The only difference is that LVB does not have a "WALK" parameter when
describing sector walls.

This format is not documented anywhere else, as far as my knowledge goes.
It was used for the demo release of Dark Forces, and was scrapped in favor
of the plain-text format for the final release of the game.


All multi-byte values are little-endian unless noted otherwise.
Descriptions without '=' have values that will vary.
Coordinates are floating-point values in the LEV format. They
are stored as fixed-point 16.16 numbers in this format.


/* General Properties */

// Magic identifier.
int8[3] = "LVB"
// Padding, possibly functions as a form of guard byte to detect corruption.
int8 = 0xF4
// Size of the LVB - 8. Eight bytes for this section and the VER section.
int32

// Version identifier.
int8[3] = "VER"
// Major version.
int8
// Minor version.
int8
// Padding
int8 = 0

// Level name identifier.
int8[3] = "LNA"
// Length of name, including null-terminator.
int8
// Name as null-terminated string.
int8[length]

// Palette name identifier.
int8[3] = "PFL"
// Length of name, including null-terminator.
int8
// Name as null-terminated string.
int8[length]

// Music name identifier.
int8[3] = "MFL"
// Length of name, including null-terminator.
int8
// Name as null-terminated string.
int8[length]

// Sky parallax identifier.
int8[3] = "LNF"
// Size of parallax section in bytes. Always 8 bytes.
int8 = 0x08
// X parallax as a fixed-point 16.16 number.
int32
// Y parallax as a fixed-point 16.16 number.
int32


/* Textures */

// Textures section identifier.
int8[3] = "TEX"
// Padding, possibly functions as a form of guard byte to detect corruption.
int8 = 0xF4
// Size of textures section in bytes.
int32

// Texture count identifier.
int8[3] = "TNO"
// Size of texture count section in bytes. Always 4 bytes.
int8 = 0x04
// Number of textures.
int32

    /* Individual Textures */
    
    // Texture name identifier.
    int8[3] = "TNA"
    // Length of name, including null-terminator.
    int8
    // Name as null-terminated string.
    int8[length]


/* Sectors */

// Sectors section identifier.
int8[3] = "SCS"
// Padding, possibly functions as a form of guard byte to detect corruption.
int8 = 0xF4
// Size of sectors section in bytes.
int32

// Sector count identifier.
int8[3] = "SNO"
// Size of sector count section in bytes. Always 4 bytes.
int8 = 0x04
// Number of sectors.
int32


    /* Individual Sectors */
     
    // Sector identifier.
    int8[3] = "SEC"
    // Padding, possibly functions as a form of guard byte to detect corruption.
    int8 = 0xF4
    // Size of individual sector section in bytes.
    // That is going to include sector information, vertices, and walls.
    int32

    // TOTALLY OPTIONAL! THIS MIGHT NOT APPEAR!
    int8[3] = "SNA" // sector name
    int8 // size of sector name, including null-terminator
    int8[size of name] // sector name, null-terminated

    // THIS ALWAYS APPEARS
    int8[3] = "SNF" // sector properties
    int8 = 0x2C // length of sector properties section, always 0x2C bytes

    int16 // floor texture index
    int32 // floor texture x offset (fixed 16.16)
    int32 // floor texture y offset (fixed 16.16)
    int8 // floor unused value

    int16 // ceiling texture index
    int32 // ceiling texture x offset (fixed 16.16)
    int32 // ceiling texture y offset (fixed 16.16)
    int8 // ceiling unused value

    int32 // floor altitude (fixed 16.16)
    int32 // ceiling altitude (fixed 16.16)
    int32 // second altitude (fixed 16.16)

    int8 // ambient light

    int8[3] // flag1, must combine bytes manually
    int16 // flag2
    int16 // flag3

    int16 // layer


        /* Vertices */
        int8[3] = "VNO" // number of vertices
        int8 = 0x04 // size of num verts section, always 4 bytes
        int32 // number of vertices


            /* Individual Vertices */
            int8[3] = "VRT" // vertex
            int8 = 0x08 // size of vertex section, always 8 bytes
            int32 // x (fixed 16.16)
            int32 // y (fixed 16.16)


        /* Walls */
        int8[3] = "WLS"
        int8 = 0xF4 // padding
        int32 // size of walls section in bytes

        int8[3] = "WNO"
        int8 = 0x04 // size of wall num section, always 4 bytes
        int32 // number of walls


            /* Individual Walls */
            int8[3] = "WAL"
            int8 = 0x3B // size of wall properties in bytes, always 0x3B

            int16 // mid texture
            int32 // mid texture x offset (fixed 16.16)
            int32 // mid texture y offset (fixed 16.16)
            int8 // mid texture unused

            int16 // top texture
            int32 // top texture x offset (fixed 16.16)
            int32 // top texture y offset (fixed 16.16)
            int8 // top texture unused

            int16 // bottom texture
            int32 // bottom texture x offset (fixed 16.16)
            int32 // bottom texture y offset (fixed 16.16)
            int8 // bottom texture unused

            int16 // sign texture, -1 if none
            int32 // sign texture x offset (fixed 16.16)
            int32 // sign texture y offset (fixed 16.16)

            int16 // left vertex
            int16 // right vertex

            int16 // adjoin
            int16 // mirror
            // NO WALK FIELD, UNLIKE LEV ALTERNATIVE

            int16 // flag one
            int16 // flag two
            int16 // flag three

            int16 // light
